/* ----------------------------------------------------------------------------
 * Copyright (C) 2015      European Space Agency
 *                         European Space Operations Centre
 *                         Darmstadt
 *                         Germany
 * ----------------------------------------------------------------------------
 * System                : ESA NanoSat MO Framework
 * ----------------------------------------------------------------------------
 * Licensed under the European Space Agency Public License, Version 2.0
 * You may not use this file except in compliance with the License.
 *
 * Except as expressly set forth in this License, the Software is provided to
 * You on an "as is" basis and without warranties of any kind, including without
 * limitation merchantability, fitness for a particular purpose, absence of
 * defects or errors, accuracy or non-infringement of intellectual property rights.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 * ----------------------------------------------------------------------------
 */
package esa.mo.fw.configurationtool.services.mc;

import esa.mo.tools.mowindow.MOWindow;
import esa.mo.mc.impl.consumer.ParameterConsumerServiceImpl_old;
import java.io.InterruptedIOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.ccsds.moims.mo.com.structures.InstanceBooleanPair;
import org.ccsds.moims.mo.com.structures.InstanceBooleanPairList;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mal.structures.Identifier;
import org.ccsds.moims.mo.mal.structures.IdentifierList;
import org.ccsds.moims.mo.mal.structures.LongList;
import org.ccsds.moims.mo.mal.structures.UOctet;
import org.ccsds.moims.mo.mal.structures.Union;
import org.ccsds.moims.mo.mc.parameter.body.GetValueResponse;
import org.ccsds.moims.mo.mc.parameter.structures.ParameterValue;
import org.ccsds.moims.mo.mc.parameter.structures.ParameterValueList;

/**
 *
 * @author Cesar Coelho
 */
public class ParameterConsumerPanel_old extends javax.swing.JPanel {

    ParameterConsumerServiceImpl_old serviceMCParameter;
    ParameterAddModify formAddModifyParameter;

    /**
     * Creates new formAddModifyParameter ConsumerPanelArchive
     *
     * @param parameterService
     */
    public ParameterConsumerPanel_old(ParameterConsumerServiceImpl_old parameterService) {
        initComponents();
        this.serviceMCParameter = parameterService;
        this.formAddModifyParameter = new ParameterAddModify(parameterService);
        formAddModifyParameter.setVisible(false);

        parameterTable.setModel(this.serviceMCParameter.getParameterTableData());

    }
    
    /**
     * This method is called from within the constructor to initialize the formAddModifyParameter.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        parameterTable = new javax.swing.JTable();
        parameterTab = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        getValueButton = new javax.swing.JButton();
        setValueButton = new javax.swing.JButton();
        enableDefinitionButton = new javax.swing.JButton();
        addDefinitionButton = new javax.swing.JButton();
        updateDefinitionButton = new javax.swing.JButton();
        removeDefinitionButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        getValueAllButton = new javax.swing.JButton();
        enableAllDefinition = new javax.swing.JButton();
        listDefinitionAllButton = new javax.swing.JButton();
        removeDefinitionAllButton = new javax.swing.JButton();

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Parameter Service");
        jLabel6.setToolTipText("");

        jScrollPane2.setHorizontalScrollBar(null);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(796, 380));
        jScrollPane2.setRequestFocusEnabled(false);

        parameterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null,  new Boolean(true), null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Obj Inst Id", "name", "description", "rawType", "rawUnit", "generationEnabled", "updateInterval"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        parameterTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        parameterTable.setAutoscrolls(false);
        parameterTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        parameterTable.setMaximumSize(null);
        parameterTable.setMinimumSize(null);
        parameterTable.setPreferredSize(null);
        parameterTable.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                parameterTableComponentAdded(evt);
            }
        });
        jScrollPane2.setViewportView(parameterTable);

        parameterTab.setLayout(new java.awt.GridLayout(2, 1));

        getValueButton.setText("getValue");
        getValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getValueButtonActionPerformed(evt);
            }
        });
        jPanel1.add(getValueButton);

        setValueButton.setText("setValue");
        setValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setValueButtonActionPerformed(evt);
            }
        });
        jPanel1.add(setValueButton);

        enableDefinitionButton.setText("enableGeneration");
        enableDefinitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDefinitionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(enableDefinitionButton);

        addDefinitionButton.setText("addDefinition");
        addDefinitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDefinitionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addDefinitionButton);

        updateDefinitionButton.setText("updateDefinition");
        updateDefinitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDefinitionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateDefinitionButton);

        removeDefinitionButton.setText("removeDefinition");
        removeDefinitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDefinitionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeDefinitionButton);

        parameterTab.add(jPanel1);

        getValueAllButton.setText("getValue(0)");
        getValueAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getValueAllButtonActionPerformed(evt);
            }
        });
        jPanel5.add(getValueAllButton);

        enableAllDefinition.setText("enableGeneration(group=false, 0)");
        enableAllDefinition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableAllDefinitionActionPerformed(evt);
            }
        });
        jPanel5.add(enableAllDefinition);

        listDefinitionAllButton.setText("listDefinition(\"*\")");
        listDefinitionAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDefinitionAllButtonActionPerformed(evt);
            }
        });
        jPanel5.add(listDefinitionAllButton);

        removeDefinitionAllButton.setText("removeDefinition(0)");
        removeDefinitionAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDefinitionAllButtonActionPerformed(evt);
            }
        });
        jPanel5.add(removeDefinitionAllButton);

        parameterTab.add(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterTab, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parameterTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void parameterTableComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_parameterTableComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_parameterTableComponentAdded

    private void getValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getValueButtonActionPerformed

        if (parameterTable.getSelectedRow() == -1){ // The row is not selected?
            return;  // Well, then nothing to be done here folks!
        }
        Long objId = new Long(parameterTable.getValueAt(parameterTable.getSelectedRow(), 0).toString());
        LongList longlist = new LongList();
        longlist.add(objId);

        GetValueResponse value = this.serviceMCParameter.getValue(longlist);

//        PictureFrame frame = new PictureFrame((Blob) value.getBodyElement1().get(0).getRawValue());
        
        String str = "";
        for (int i = 0; i < value.getBodyElement0().size(); i++) {
            str += "The value for objId " + value.getBodyElement0().get(i).toString() + " is:" + "\n" + value.getBodyElement1().get(i).toString() + "\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned Values from the Provider", JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_getValueButtonActionPerformed

    private void enableDefinitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDefinitionButtonActionPerformed

        if (parameterTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(parameterTable.getValueAt(parameterTable.getSelectedRow(), 0).toString());
        String str = parameterTable.getValueAt(parameterTable.getSelectedRow(), 5).toString();
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList boolPairList = new InstanceBooleanPairList();
        boolPairList.add(new InstanceBooleanPair(objId, !curState));
        Boolean outIsGroup = false;
        
        try {
            this.serviceMCParameter.getParameterService().enableGeneration(outIsGroup, boolPairList);
        } catch (MALInteractionException | MALException ex) {
            Logger.getLogger(ParameterConsumerPanel_old.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_enableDefinitionButtonActionPerformed

    private void addDefinitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDefinitionButtonActionPerformed
        formAddModifyParameter.setAddParameterForm();
        formAddModifyParameter.refreshParametersComboBox();
        formAddModifyParameter.setVisible(true);
    }//GEN-LAST:event_addDefinitionButtonActionPerformed

    private void updateDefinitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDefinitionButtonActionPerformed

        if (parameterTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }
        formAddModifyParameter.setParameterDefinitionSelectedIndex(parameterTable.getSelectedRow());
        formAddModifyParameter.setUpdateParameterForm(parameterTable);
        formAddModifyParameter.refreshParametersComboBox();
        formAddModifyParameter.setVisible(true);
    }//GEN-LAST:event_updateDefinitionButtonActionPerformed

    private void removeDefinitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDefinitionButtonActionPerformed

        if (parameterTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(parameterTable.getValueAt(parameterTable.getSelectedRow(), 0).toString());
        LongList longlist = new LongList();
        longlist.add(objId);
        serviceMCParameter.removeDefinition(longlist);

        this.serviceMCParameter.getParameterTableData().removeRow(parameterTable.getSelectedRow());

    }//GEN-LAST:event_removeDefinitionButtonActionPerformed

    private void getValueAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getValueAllButtonActionPerformed

        Long objId = (long) 0;
        LongList longlist = new LongList();
        longlist.add(objId);

        org.ccsds.moims.mo.mc.parameter.body.GetValueResponse value = serviceMCParameter.getValue(longlist);

        String str = "";
        for (int i = 0; i < value.getBodyElement0().size(); i++) {
            str += "The value for objId " + value.getBodyElement0().get(i).toString() + " is:" + "\n" + value.getBodyElement1().get(i).toString() + "\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned List from the Provider", JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_getValueAllButtonActionPerformed

    private void enableAllDefinitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableAllDefinitionActionPerformed

        String str;
        if (parameterTable.getSelectedRow() == -1) {  // Used to avoid problems if no row is selected
            if (parameterTable.getRowCount() != 0) {
                str = parameterTable.getValueAt(0, 5).toString(); // Get the status from selection
            } else {
                str = "true";
            }
        } else {
            str = parameterTable.getValueAt(parameterTable.getSelectedRow(), 5).toString(); // Get the status from selection
        }
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList BoolPairList = new InstanceBooleanPairList();
        BoolPairList.add(new InstanceBooleanPair((long) 0, !curState));  // Zero is the wildcard
        
        try {
            serviceMCParameter.getParameterService().enableGeneration(false, BoolPairList);  // false: no group service
        } catch (MALInteractionException | MALException ex) {
            Logger.getLogger(ParameterConsumerPanel_old.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < parameterTable.getRowCount(); i++) {
            parameterTable.setValueAt(!curState, i, 5);
        }

    }//GEN-LAST:event_enableAllDefinitionActionPerformed

    private void listDefinitionAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDefinitionAllButtonActionPerformed

        IdentifierList IdList = new IdentifierList();
        IdList.add(new Identifier("*"));

        LongList output = serviceMCParameter.listDefinition(IdList);

        String str = "Object instance identifiers on the provider: \n";
        for (Long output1 : output) {
            str += output1.toString() + "\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned List from the Provider", JOptionPane.PLAIN_MESSAGE);
        Logger.getLogger(ParameterConsumerPanel_old.class.getName()).log(Level.INFO, "listDefinition(\"*\") returned {0} object instance identifiers", output.size());


    }//GEN-LAST:event_listDefinitionAllButtonActionPerformed

    private void removeDefinitionAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDefinitionAllButtonActionPerformed

        Long objId = (long) 0;
        LongList longlist = new LongList();
        longlist.add(objId);

        serviceMCParameter.removeDefinition(longlist);

    }//GEN-LAST:event_removeDefinitionAllButtonActionPerformed

    private void setValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setValueButtonActionPerformed

        if (parameterTable.getSelectedRow() == -1){ // The row is not selected?
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(parameterTable.getValueAt(parameterTable.getSelectedRow(), 0).toString());
        LongList objIds = new LongList();
        objIds.add(objId);

        ParameterValue newValue = new ParameterValue();
//        newValue.setRawValue(new Union((float) 0));
        newValue.setValid(true);
        newValue.setInvalidSubState(new UOctet ((short) 0));
        MOWindow window = new MOWindow(newValue, true);
        try {
            newValue = (ParameterValue) window.getObject();
        } catch (InterruptedIOException ex) {
            return;
        }
        
        ParameterValueList newValues = new ParameterValueList();
        newValues.add(newValue);

        try {
            serviceMCParameter.getParameterService().setValue(objIds, newValues);
        } catch (MALInteractionException | MALException ex) {
            Logger.getLogger(ParameterConsumerPanel_old.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_setValueButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDefinitionButton;
    private javax.swing.JButton enableAllDefinition;
    private javax.swing.JButton enableDefinitionButton;
    private javax.swing.JButton getValueAllButton;
    private javax.swing.JButton getValueButton;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listDefinitionAllButton;
    private javax.swing.JPanel parameterTab;
    private javax.swing.JTable parameterTable;
    private javax.swing.JButton removeDefinitionAllButton;
    private javax.swing.JButton removeDefinitionButton;
    private javax.swing.JButton setValueButton;
    private javax.swing.JButton updateDefinitionButton;
    // End of variables declaration//GEN-END:variables
}
