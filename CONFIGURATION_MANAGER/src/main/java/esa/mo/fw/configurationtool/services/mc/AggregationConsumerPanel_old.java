/* ----------------------------------------------------------------------------
 * Copyright (C) 2015      European Space Agency
 *                         European Space Operations Centre
 *                         Darmstadt
 *                         Germany
 * ----------------------------------------------------------------------------
 * System                : ESA NanoSat MO Framework
 * ----------------------------------------------------------------------------
 * Licensed under the European Space Agency Public License, Version 2.0
 * You may not use this file except in compliance with the License.
 *
 * Except as expressly set forth in this License, the Software is provided to
 * You on an "as is" basis and without warranties of any kind, including without
 * limitation merchantability, fitness for a particular purpose, absence of
 * defects or errors, accuracy or non-infringement of intellectual property rights.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 * ----------------------------------------------------------------------------
 */
package esa.mo.fw.configurationtool.services.mc;

import esa.mo.fw.configurationtool.services.mc.ParameterPublishedValues.ParameterConsumerAdapter;
import esa.mo.mc.impl.consumer.AggregationConsumerServiceImpl_old;
import esa.mo.helpertools.connections.ConnectionConsumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.ccsds.moims.mo.com.structures.InstanceBooleanPair;
import org.ccsds.moims.mo.com.structures.InstanceBooleanPairList;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mal.structures.Identifier;
import org.ccsds.moims.mo.mal.structures.IdentifierList;
import org.ccsds.moims.mo.mal.structures.LongList;
import org.ccsds.moims.mo.mal.structures.Subscription;
import org.ccsds.moims.mo.mal.structures.UpdateHeader;
import org.ccsds.moims.mo.mc.aggregation.consumer.AggregationAdapter;
import org.ccsds.moims.mo.mc.aggregation.structures.AggregationSetValue;
import org.ccsds.moims.mo.mc.aggregation.structures.AggregationValue;

/**
 *
 * @author Cesar Coelho
 */
public class AggregationConsumerPanel_old extends javax.swing.JPanel {

    private AggregationConsumerServiceImpl_old aggregationService;
    private AggregationAddModify form;
    private ConnectionConsumer connection = new ConnectionConsumer();

    /**
     * Creates new form ConsumerPanelArchive
     *
     * @param aggregationService
     */
    public AggregationConsumerPanel_old(AggregationConsumerServiceImpl_old aggregationService) {
        initComponents();
        this.aggregationService = aggregationService;
        this.form = new AggregationAddModify(aggregationService);
        form.setVisible(false);

        aggregationTable.setModel(aggregationService.getAggregationTableData());

        // Subscribe to ParametersValues
        Subscription subscription = ConnectionConsumer.subscriptionWildcard();
        try {
            aggregationService.getAggregationService().monitorValueRegister(subscription, new AggregationConsumerAdapter());
        } catch (MALInteractionException | MALException ex) {
            Logger.getLogger(AggregationConsumerPanel_old.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        aggregationTable = new javax.swing.JTable();
        aggregationTab = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        listDefinitionAllButtonAgg = new javax.swing.JButton();
        removeDefinitionAllButtonAgg = new javax.swing.JButton();
        msgBoxOn = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        getValueAllButtonAgg = new javax.swing.JButton();
        enableDefinitionAllAgg = new javax.swing.JButton();
        enableFilterAllAgg = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        getValueButtonAgg = new javax.swing.JButton();
        enableDefinitionButtonAgg = new javax.swing.JButton();
        enableFilterButtonAgg = new javax.swing.JButton();
        addDefinitionButtonAgg = new javax.swing.JButton();
        updateDefinitionButtonAgg = new javax.swing.JButton();
        removeDefinitionButtonAgg = new javax.swing.JButton();

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Aggregation Service");
        jLabel6.setToolTipText("");

        jScrollPane3.setHorizontalScrollBar(null);
        jScrollPane3.setRequestFocusEnabled(false);

        aggregationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,  new Boolean(true), null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Obj Inst Id", "name", "description", "category", "generationEnabled", "updateInterval", "filterEnabled", "filteredTimeout"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Object.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        aggregationTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        aggregationTable.setAutoscrolls(false);
        aggregationTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        aggregationTable.setMaximumSize(null);
        aggregationTable.setMinimumSize(null);
        aggregationTable.setPreferredSize(null);
        aggregationTable.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                aggregationTableComponentAdded(evt);
            }
        });
        jScrollPane3.setViewportView(aggregationTable);

        aggregationTab.setLayout(new java.awt.GridLayout(3, 1));

        listDefinitionAllButtonAgg.setText("listDefinition(\"*\")");
        listDefinitionAllButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDefinitionAllButtonAggActionPerformed(evt);
            }
        });
        jPanel11.add(listDefinitionAllButtonAgg);

        removeDefinitionAllButtonAgg.setText("removeDefinition(0)");
        removeDefinitionAllButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDefinitionAllButtonAggActionPerformed(evt);
            }
        });
        jPanel11.add(removeDefinitionAllButtonAgg);

        msgBoxOn.setText("Display Published AggregationValues");
        msgBoxOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgBoxOnActionPerformed(evt);
            }
        });
        jPanel11.add(msgBoxOn);

        aggregationTab.add(jPanel11);

        getValueAllButtonAgg.setText("getValue(0)");
        getValueAllButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getValueAllButtonAggActionPerformed(evt);
            }
        });
        jPanel8.add(getValueAllButtonAgg);

        enableDefinitionAllAgg.setText("enableGeneration(group=false, 0)");
        enableDefinitionAllAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDefinitionAllAggActionPerformed(evt);
            }
        });
        jPanel8.add(enableDefinitionAllAgg);

        enableFilterAllAgg.setText("enableFilter(group=false, 0)");
        enableFilterAllAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableFilterAllAggActionPerformed(evt);
            }
        });
        jPanel8.add(enableFilterAllAgg);

        aggregationTab.add(jPanel8);

        getValueButtonAgg.setText("getValue");
        getValueButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getValueButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(getValueButtonAgg);

        enableDefinitionButtonAgg.setText("enableGeneration");
        enableDefinitionButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableDefinitionButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(enableDefinitionButtonAgg);

        enableFilterButtonAgg.setText("enableFilter");
        enableFilterButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableFilterButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(enableFilterButtonAgg);

        addDefinitionButtonAgg.setText("addDefinition");
        addDefinitionButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDefinitionButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(addDefinitionButtonAgg);

        updateDefinitionButtonAgg.setText("updateDefinition");
        updateDefinitionButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDefinitionButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(updateDefinitionButtonAgg);

        removeDefinitionButtonAgg.setText("removeDefinition");
        removeDefinitionButtonAgg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDefinitionButtonAggActionPerformed(evt);
            }
        });
        jPanel7.add(removeDefinitionButtonAgg);

        aggregationTab.add(jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(aggregationTab, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aggregationTab, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void aggregationTableComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_aggregationTableComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_aggregationTableComponentAdded

    private void getValueButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getValueButtonAggActionPerformed
        if (aggregationTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 0).toString());
        LongList longlist = new LongList();
        longlist.add(objId);

        org.ccsds.moims.mo.mc.aggregation.body.GetValueResponse value = aggregationService.getValue(longlist);

        String str = "";
        for (int h = 0; h < value.getBodyElement1().size(); h++) {
            str += "The value for objId " + value.getBodyElement0().get(h).toString() + " (AggregationValue index: " + h + ") is:" + "\n";
            for (int i = 0; i < value.getBodyElement1().get(h).getParameterSetValues().size(); i++) {
                for (int j = 0; j < value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().size(); j++) {
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j) == null) {
                        continue;
                    }

                    str += "(parameterSetValue index: " + i + ") " + "validityState: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getInvalidSubState().toString() + "\n";
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getRawValue() != null) {
                        str += "(parameterSetValue index: " + i + ") " + "rawValue: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getRawValue().toString() + "\n";
                    }
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getConvertedValue() != null) {
                        str += "(parameterSetValue index: " + i + ") " + "convertedValue: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getConvertedValue().toString() + "\n";
                    }

                    str += "\n";
                }
            }
            str += "---------------------------------------\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned Values from the Provider", JOptionPane.PLAIN_MESSAGE);

//       this.save2File();
    }//GEN-LAST:event_getValueButtonAggActionPerformed

    private void enableDefinitionButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDefinitionButtonAggActionPerformed
        if (aggregationTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 0).toString());
        String str = aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 4).toString();
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList BoolPairList = new InstanceBooleanPairList();
        BoolPairList.add(new InstanceBooleanPair(objId, !curState));

        aggregationService.enableGeneration(false, BoolPairList);

        aggregationTable.setValueAt(!curState, aggregationTable.getSelectedRow(), 4);
//            this.save2File();

    }//GEN-LAST:event_enableDefinitionButtonAggActionPerformed

    private void enableFilterButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableFilterButtonAggActionPerformed
        if (aggregationTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 0).toString());
        String str = aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 6).toString();
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList BoolPairList = new InstanceBooleanPairList();
        BoolPairList.add(new InstanceBooleanPair(objId, !curState));

        aggregationService.enableFilter(false, BoolPairList);

        aggregationTable.setValueAt(!curState, aggregationTable.getSelectedRow(), 6);
//            this.save2File();

    }//GEN-LAST:event_enableFilterButtonAggActionPerformed

    private void addDefinitionButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDefinitionButtonAggActionPerformed
        form.setAddParameterForm();
        form.setVisible(true);
    }//GEN-LAST:event_addDefinitionButtonAggActionPerformed

    private void updateDefinitionButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDefinitionButtonAggActionPerformed
        if (aggregationTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }
        form.setUpdateParameterForm(aggregationTable);
        form.setVisible(true);
    }//GEN-LAST:event_updateDefinitionButtonAggActionPerformed

    private void removeDefinitionButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDefinitionButtonAggActionPerformed
        if (aggregationTable.getSelectedRow() == -1) // The row is not selected?
        {
            return;  // Well, then nothing to be done here folks!
        }

        Long objId = new Long(aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 0).toString());
        LongList longlist = new LongList();
        longlist.add(objId);

        aggregationService.removeDefinition(longlist);

        aggregationService.getParameterSetsTableDataAll().remove(aggregationTable.getSelectedRow());
        aggregationService.getAggregationTableData().removeRow(aggregationTable.getSelectedRow());

//        this.save2File();
    }//GEN-LAST:event_removeDefinitionButtonAggActionPerformed

    private void getValueAllButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getValueAllButtonAggActionPerformed

        Long objId = (long) 0;
        LongList longlist = new LongList();
        longlist.add(objId);

        org.ccsds.moims.mo.mc.aggregation.body.GetValueResponse value = aggregationService.getValue(longlist);

        String str = "";
        for (int h = 0; h < value.getBodyElement1().size(); h++) {
            str += "The value for objId " + value.getBodyElement0().get(h).toString() + " (AggregationValue index: " + h + ") is:" + "\n";
            for (int i = 0; i < value.getBodyElement1().get(h).getParameterSetValues().size(); i++) {
                for (int j = 0; j < value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().size(); j++) {
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j) == null) {
                        continue;
                    }
                    str += "(parameterSetValue index: " + i + ") " + "validityState: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getInvalidSubState().toString() + "\n";
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getRawValue() != null) {
                        str += "(parameterSetValue index: " + i + ") " + "rawValue: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getRawValue().toString() + "\n";
                    }
                    if (value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getConvertedValue() != null) {
                        str += "(parameterSetValue index: " + i + ") " + "convertedValue: " + value.getBodyElement1().get(h).getParameterSetValues().get(i).getValues().get(j).getConvertedValue().toString() + "\n";
                    }
                    str += "\n";
                }
            }
            str += "---------------------------------------\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned List from the Provider", JOptionPane.PLAIN_MESSAGE);

//        this.save2File();
    }//GEN-LAST:event_getValueAllButtonAggActionPerformed

    private void enableDefinitionAllAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableDefinitionAllAggActionPerformed

        String str;
        if (aggregationTable.getSelectedRow() == -1) {  // Used to avoid problems if no row is selected
            if (aggregationTable.getRowCount() != 0) {
                str = aggregationTable.getValueAt(0, 4).toString(); // Get the status from selection
            } else {
                str = "true";
            }
        } else {
            str = aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 4).toString(); // Get the status from selection
        }
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList BoolPairList = new InstanceBooleanPairList();
        BoolPairList.add(new InstanceBooleanPair((long) 0, !curState));  // Zero is the wildcard

        aggregationService.enableGeneration(false, BoolPairList);  // false: no group service

        for (int i = 0; i < aggregationTable.getRowCount(); i++) {
            aggregationTable.setValueAt(!curState, i, 4);
        }

//        this.save2File();
    }//GEN-LAST:event_enableDefinitionAllAggActionPerformed

    private void enableFilterAllAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableFilterAllAggActionPerformed

        String str;
        if (aggregationTable.getSelectedRow() == -1) {  // Used to avoid problems if no row is selected
            if (aggregationTable.getRowCount() != 0) {
                str = aggregationTable.getValueAt(0, 4).toString(); // Get the status from selection
            } else {
                str = "true";
            }
        } else {
            str = aggregationTable.getValueAt(aggregationTable.getSelectedRow(), 6).toString(); // Get the status from selection
        }
        Boolean curState = (str.equals("true")); // String to Boolean conversion
        InstanceBooleanPairList BoolPairList = new InstanceBooleanPairList();
        BoolPairList.add(new InstanceBooleanPair((long) 0, !curState));  // Zero is the wildcard

        aggregationService.enableFilter(false, BoolPairList);  // false: no group service

        for (int i = 0; i < aggregationTable.getRowCount(); i++) {
            aggregationTable.setValueAt(!curState, i, 6);
        }

//        this.save2File();
    }//GEN-LAST:event_enableFilterAllAggActionPerformed

    private void listDefinitionAllButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDefinitionAllButtonAggActionPerformed
        IdentifierList IdList = new IdentifierList();
        IdList.add(new Identifier("*"));

        LongList output = aggregationService.listDefinition(IdList);

        String str = "Object instance identifiers on the provider: \n";
        for (Long output1 : output) {
            str += output1.toString() + "\n";
        }

        JOptionPane.showMessageDialog(null, str, "Returned List from the Provider", JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_listDefinitionAllButtonAggActionPerformed

    private void removeDefinitionAllButtonAggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDefinitionAllButtonAggActionPerformed

        Long objId = new Long(0);
        LongList longlist = new LongList();
        longlist.add(objId);

        aggregationService.removeDefinition(longlist);

        while (aggregationService.getAggregationTableData().getRowCount() != 0) {
            aggregationService.getParameterSetsTableDataAll().remove(aggregationService.getAggregationTableData().getRowCount() - 1);
            aggregationService.getAggregationTableData().removeRow(aggregationService.getAggregationTableData().getRowCount() - 1);
        }

//        this.save2File();
    }//GEN-LAST:event_removeDefinitionAllButtonAggActionPerformed

    private void msgBoxOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgBoxOnActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_msgBoxOnActionPerformed

    public class AggregationConsumerAdapter extends AggregationAdapter {

        @Override
        public void monitorValueNotifyReceived(org.ccsds.moims.mo.mal.transport.MALMessageHeader msgHeader,
                org.ccsds.moims.mo.mal.structures.Identifier identifier,
                org.ccsds.moims.mo.mal.structures.UpdateHeaderList lUpdateHeaderList,
                org.ccsds.moims.mo.com.structures.ObjectIdList _ObjectIdList2,
                org.ccsds.moims.mo.mc.aggregation.structures.AggregationValueList lAggregationValueList,
                java.util.Map qosProperties) {

            final long iDiff = System.currentTimeMillis() - msgHeader.getTimestamp().getValue();

            final UpdateHeader updateHeader = lUpdateHeaderList.get(0);
            final String Aggname = updateHeader.getKey().getFirstSubKey().getValue();
            final int objId = updateHeader.getKey().getSecondSubKey().intValue();

            try {
                if (msgBoxOn.isSelected() && lUpdateHeaderList.size() != 0 && lAggregationValueList.size() != 0) {
                    String str = "";
                    final AggregationValue aggregationValue = lAggregationValueList.get(0);
                    str += "AggregationValue generationMode: " + aggregationValue.getGenerationMode().toString() + " (filtered: " + aggregationValue.getFiltered().toString() + ")" + "\n";

                    str += "Aggregation objId " + objId + " (name: " + Aggname + "):" + "\n";

                    for (int i = 0; i < aggregationValue.getParameterSetValues().size(); i++) {  // Cycle through parameterSetValues
                        str += "- AggregationParameterSet values index: " + i + "\n";
                        str += "deltaTime: " + aggregationValue.getParameterSetValues().get(i).getDeltaTime();
                        str += " and intervalTime: " + aggregationValue.getParameterSetValues().get(i).getIntervalTime() + "\n";
                        AggregationSetValue parameterSetsValue = aggregationValue.getParameterSetValues().get(i);

                        for (int j = 0; j < parameterSetsValue.getValues().size(); j++) { // Cycle through the values
                            if (parameterSetsValue.getValues().get(j) == null) {
                                continue;
                            }
                            str += "values index: " + j + "\n";
                            str += "validityState: " + parameterSetsValue.getValues().get(j).getInvalidSubState().toString() + "\n";
                            if (parameterSetsValue.getValues().get(j).getRawValue() != null) {
                                str += "rawValue: " + parameterSetsValue.getValues().get(j).getRawValue().toString() + "\n";
                            }
                            if (parameterSetsValue.getValues().get(j).getConvertedValue() != null) {
                                str += "convertedValue: " + parameterSetsValue.getValues().get(j).getConvertedValue().toString() + "\n";
                            }
                            str += "\n";
                        }
                    }

                    JOptionPane.showMessageDialog(null, str, "Returned Values from the Provider", JOptionPane.PLAIN_MESSAGE);
                }

            } catch (NumberFormatException ex) {
            }

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDefinitionButtonAgg;
    private javax.swing.JPanel aggregationTab;
    private javax.swing.JTable aggregationTable;
    private javax.swing.JButton enableDefinitionAllAgg;
    private javax.swing.JButton enableDefinitionButtonAgg;
    private javax.swing.JButton enableFilterAllAgg;
    private javax.swing.JButton enableFilterButtonAgg;
    private javax.swing.JButton getValueAllButtonAgg;
    private javax.swing.JButton getValueButtonAgg;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton listDefinitionAllButtonAgg;
    private javax.swing.JCheckBox msgBoxOn;
    private javax.swing.JButton removeDefinitionAllButtonAgg;
    private javax.swing.JButton removeDefinitionButtonAgg;
    private javax.swing.JButton updateDefinitionButtonAgg;
    // End of variables declaration//GEN-END:variables
}
